[CallingConvention]
@=STDCALL
[CryptInstallDefaultContext]
1=HCRYPTPROV hCryptProv
2=DWORD dwDefaultType
3=const void* pvDefaultPara
4=DWORD dwFlags
5=void* pvReserved
6=HCRYPTDEFAULTCONTEXT* phDefaultContext
ParamCount=6
Header=cryptography.h.api;
[CryptUninstallDefaultContext]
1=HCRYPTDEFAULTCONTEXT hDefaultContext
2=DWORD dwFlags
3=void* pvReserved
ParamCount=3
Header=cryptography.h.api;
[CryptDecodeObject]
1=[CertEncodingType] dwCertEncodingType
2=LPCSTR lpszStructType
3=const BYTE* pbEncoded
4=DWORD cbEncoded
5=[CryptDecodeObjectFlags] dwFlags
6=void* pvStructInfo
7=DWORD* pcbStructInfo
ParamCount=7
Header=cryptography.h.api;
[CryptDecodeObjectEx]
1=[CertEncodingType] dwCertEncodingType
2=LPCSTR lpszStructType
3=const BYTE* pbEncoded
4=DWORD cbEncoded
5=[CryptDecodeObjectFlags] dwFlags
6=PCRYPT_DECODE_PARA pDecodePara
7=void* pvStructInfo
8=DWORD* pcbStructInfo
ParamCount=8
Header=cryptography.h.api;
[CryptEncodeObject]
1=[CertEncodingType] dwCertEncodingType
2=LPCSTR lpszStructType
3=const void* pvStructInfo
4=BYTE* pbEncoded
5=DWORD* pcbEncoded
ParamCount=5
Header=cryptography.h.api;
[CryptEncodeObjectEx]
1=[CertEncodingType] dwCertEncodingType
2=LPCSTR lpszStructType
3=const void* pvStructInfo
4=[CryptEncodeObjectFlags] dwFlags
5=PCRYPT_ENCODE_PARA pEncodePara
6=void* pvEncoded
7=DWORD* pcbEncoded
ParamCount=7
Header=cryptography.h.api;
[CryptProtectData]
1=DATA_BLOB* pDataIn
2=LPCWSTR szDataDescr
3=DATA_BLOB* pOptionalEntropy
4=PVOID pvReserved
5=CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct
6=[CryptProtectDataFlags] dwFlags
7=DATA_BLOB* pDataOut
ParamCount=7
Header=cryptography.h.api;
[CryptProtectMemory]
1=LPVOID pData
2=DWORD cbData
3=[CryptProtectMemoryFlags] dwFlags
ParamCount=3
Header=cryptography.h.api;
[CryptUnprotectData]
1=DATA_BLOB* pDataIn
2=LPWSTR* ppszDataDescr
3=DATA_BLOB* pOptionalEntropy
4=PVOID pvReserved
5=CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct
6=[CryptProtectDataFlags] dwFlags
7=DATA_BLOB* pDataOut
ParamCount=7
Header=cryptography.h.api;
[CryptUnprotectMemory]
1=LPVOID pData
2=DWORD cbData
3=[CryptProtectMemoryFlags] dwFlags
ParamCount=3
Header=cryptography.h.api;
[CertAddStoreToCollection]
1=HCERTSTORE hCollectionStore
2=HCERTSTORE hSiblingStore
3=[CertPhysicalStoreFlags] dwUpdateFlag
4=DWORD dwPriority
ParamCount=4
Header=cryptography.h.api;
[CertCloseStore]
1=HCERTSTORE hCertStore
2=[CertCloseStoreFlags] dwFlags
ParamCount=2
Header=cryptography.h.api;
[CertControlStore]
1=HCERTSTORE hCertStore
2=DWORD dwFlags
3=[CertControlType] dwCtrlType
4=const void* pvCtrlPara
ParamCount=4
Header=cryptography.h.api;
[CertDuplicateStore]
1=HCERTSTORE hCertStore
ParamCount=1
Header=cryptography.h.api;
[CertEnumPhysicalStore]
1=const void* pvSystemStore
2=DWORD dwFlags
3=void* pvArg
4=PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum
ParamCount=4
Header=cryptography.h.api;
[CertEnumSystemStore]
1=[CertSystemStoreFlags] dwFlags
2=void* pvSystemStoreLocationPara
3=void* pvArg
4=PFN_CERT_ENUM_SYSTEM_STORE pfnEnum
ParamCount=4
Header=cryptography.h.api;
[CertEnumSystemStoreLocation]
1=DWORD dwFlags
2=void* pvArg
3=PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum
ParamCount=3
Header=cryptography.h.api;
[CertGetStoreProperty]
1=HCERTSTORE hCertStore
2=DWORD dwPropId
3=void* pvData
4=DWORD* pcbData
ParamCount=4
Header=cryptography.h.api;
[CertOpenStore]
1=[CERT_STORE_PROVIDER] lpszStoreProvider
2=[CertEncodingType] dwMsgAndCertEncodingType
3=HCRYPTPROV_LEGACY hCryptProv
4=[CertOpenStoreFlags] dwFlags
5=const void* pvPara
ParamCount=5
Header=cryptography.h.api;
[CertOpenSystemStore]
1=HCRYPTPROV_LEGACY hprov
2=LPCTSTR szSubsystemProtocol
ParamCount=2
Header=cryptography.h.api;
[CertRegisterPhysicalStore]
1=const void* pvSystemStore
2=DWORD dwFlags
3=LPCWSTR pwszStoreName
4=PCERT_PHYSICAL_STORE_INFO pStoreInfo
5=void* pvReserved
ParamCount=5
Header=cryptography.h.api;
[CertRegisterSystemStore]
1=const void* pvSystemStore
2=DWORD dwFlags
3=PCERT_SYSTEM_STORE_INFO pStoreInfo
4=void* pvReserved
ParamCount=4
Header=cryptography.h.api;
[CertRemoveStoreFromCollection]
1=HCERTSTORE hCollectionStore
2=HCERTSTORE hSiblingStore
ParamCount=2
Header=cryptography.h.api;
[CertSaveStore]
1=HCERTSTORE hCertStore
2=DWORD dwMsgAndCertEncodingType
3=DWORD dwSaveAs
4=DWORD dwSaveTo
5=void* pvSaveToPara
6=DWORD dwFlags
ParamCount=6
Header=cryptography.h.api;
[CertSetStoreProperty]
1=HCERTSTORE hCertStore
2=DWORD dwPropId
3=DWORD dwFlags
4=const void* pvData
ParamCount=4
Header=cryptography.h.api;
[CertUnregisterPhysicalStore]
1=const void* pvSystemStore
2=DWORD dwFlags
3=LPCWSTR pwszStoreName
ParamCount=3
[CertUnregisterSystemStore]
1=const void* pvSystemStore
2=DWORD dwFlags
ParamCount=2
[CertAddSerializedElementToStore]
1=HCERTSTORE hCertStore
2=const BYTE* pbElement
3=DWORD cbElement
4=DWORD dwAddDisposition
5=DWORD dwFlags
6=DWORD dwContextTypeFlags
7=CertificateStoreContextType* pdwContextType
8=const void** ppvContext
ParamCount=8
Header=cryptography.h.api;
[CertCreateContext]
1=[CertificateStoreContextType] dwContextType
2=[CertEncodingType] dwEncodingType
3=const BYTE* pbEncoded
4=DWORD cbEncoded
5=[CertCreateContextFlags] dwFlags
6=PCERT_CREATE_CONTEXT_PARA pCreatePara
ParamCount=6
Header=cryptography.h.api;
[CertEnumSubjectInSortedCTL]
1=PCCTL_CONTEXT pCtlContext
2=void** ppvNextSubject
3=PCRYPT_DER_BLOB pSubjectIdentifier
4=PCRYPT_DER_BLOB pEncodedAttributes
ParamCount=4
Header=cryptography.h.api;
[CertFindSubjectInCTL]
1=[CertEncodingType] dwEncodingType
2=DWORD dwSubjectType
3=void* pvSubject
4=PCCTL_CONTEXT pCtlContext
5=DWORD dwFlags
ParamCount=5
Header=cryptography.h.api;
[CertFindSubjectInSortedCTL]
1=PCRYPT_DATA_BLOB pSubjectIdentifier
2=PCCTL_CONTEXT pCtlContext
3=DWORD dwFlags
4=void* pvReserved
5=PCRYPT_DER_BLOB pEncodedAttributes
ParamCount=5
Header=cryptography.h.api;
[CertAddCertificateContextToStore]
1=HCERTSTORE hCertStore
2=PCCERT_CONTEXT pCertContext
3=DWORD dwAddDisposition
4=PCCERT_CONTEXT* ppStoreContext
ParamCount=4
Header=cryptography.h.api;
[CertAddCertificateLinkToStore]
1=HCERTSTORE hCertStore
2=PCCERT_CONTEXT pCertContext
3=DWORD dwAddDisposition
4=PCCERT_CONTEXT* ppStoreContext
ParamCount=4
Header=cryptography.h.api;
[CertAddEncodedCertificateToStore]
1=HCERTSTORE hCertStore
2=[CertEncodingType] dwCertEncodingType
3=const BYTE* pbCertEncoded
4=DWORD cbCertEncoded
5=[CertStoreAddDisposition] dwAddDisposition
6=PCCERT_CONTEXT* ppCertContext
ParamCount=6
Header=cryptography.h.api;
[CertAddRefServerOcspResponse]
1=HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse
ParamCount=1
Header=cryptography.h.api;
[CertAddRefServerOcspResponseContext]
1=PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext
ParamCount=1
Header=cryptography.h.api;
[CertCloseServerOcspResponse]
1=HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse
2=DWORD dwFlags
ParamCount=2
Header=cryptography.h.api;
[CertCreateCertificateContext]
1=[CertEncodingType] dwCertEncodingType
2=const BYTE* pbCertEncoded
3=DWORD cbCertEncoded
ParamCount=3
Header=cryptography.h.api;
[CertCreateSelfSignCertificate]
1=HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey
2=PCERT_NAME_BLOB pSubjectIssuerBlob
3=DWORD dwFlags
4=PCRYPT_KEY_PROV_INFO pKeyProvInfo
5=PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm
6=PSYSTEMTIME pStartTime
7=PSYSTEMTIME pEndTime
8=PCERT_EXTENSIONS pExtensions
ParamCount=8
Header=cryptography.h.api;windows.h.api;
[CertDeleteCertificateFromStore]
1=PCCERT_CONTEXT pCertContext
ParamCount=1
Header=cryptography.h.api;
[CertDuplicateCertificateContext]
1=PCCERT_CONTEXT pCertContext
ParamCount=1
Header=cryptography.h.api;
[CertEnumCertificatesInStore]
1=HCERTSTORE hCertStore
2=PCCERT_CONTEXT pPrevCertContext
ParamCount=2
Header=cryptography.h.api;
[CertFindCertificateInStore]
1=HCERTSTORE hCertStore
2=[CertEncodingType] dwCertEncodingType
3=DWORD dwFindFlags
4=[CertFindType] dwFindType
5=const void* pvFindPara
6=PCCERT_CONTEXT pPrevCertContext
ParamCount=6
Header=cryptography.h.api;
[CertFreeCertificateContext]
1=PCCERT_CONTEXT pCertContext
ParamCount=1
Header=cryptography.h.api;
[CertGetIssuerCertificateFromStore]
1=HCERTSTORE hCertStore
2=PCCERT_CONTEXT pSubjectContext
3=PCCERT_CONTEXT pPrevIssuerContext
4=DWORD* pdwFlags
ParamCount=4
Header=cryptography.h.api;
[CertGetServerOcspResponseContext]
1=HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse
2=DWORD dwFlags
3=LPVOID pvReserved
ParamCount=3
Header=cryptography.h.api;
[CertGetSubjectCertificateFromStore]
1=HCERTSTORE hCertStore
2=[CertEncodingType] dwCertEncodingType
3=PCERT_INFO pCertId
ParamCount=3
Header=cryptography.h.api;
[CertGetValidUsages]
1=DWORD cCerts
2=PCCERT_CONTEXT* rghCerts
3=int* cNumOIDs
4=LPSTR* rghOIDs
5=DWORD* pcbOIDs
ParamCount=5
Header=cryptography.h.api;
[CertOpenServerOcspResponse]
1=PCCERT_CHAIN_CONTEXT pChainContext
2=DWORD dwFlags
3=LPVOID pvReserved
ParamCount=3
Header=cryptography.h.api;
[CertRetrieveLogoOrBiometricInfo]
1=PCCERT_CONTEXT pCertContext
2=LPCSTR lpszLogoOrBiometricType
3=DWORD dwRetrievalFlags
4=DWORD dwTimeout
5=DWORD dwFlags
6=void* pvReserved
7=BYTE** ppbData
8=DWORD* pcbData
9=LPWSTR* ppwszMimeType
ParamCount=9
Header=cryptography.h.api;
[CertSelectCertificateChains]
1=LPCGUID pSelectionContext
2=[CertSelectFlags] dwFlags
3=PCCERT_SELECT_CHAIN_PARA pChainParameters
4=DWORD cCriteria
5=PCCERT_SELECT_CRITERIA rgpCriteria
6=HCERTSTORE hStore
7=PDWORD pcSelection
8=PCCERT_CHAIN_CONTEXT** pprgpSelection
ParamCount=8
Header=cryptography.h.api;windows.h.api;
[CertSerializeCertificateStoreElement]
1=PCCERT_CONTEXT pCertContext
2=DWORD dwFlags
3=BYTE* pbElement
4=DWORD* pcbElement
ParamCount=4
Header=cryptography.h.api;
[CertVerifySubjectCertificateContext]
1=PCCERT_CONTEXT pSubject
2=PCCERT_CONTEXT pIssuer
3=DWORD* pdwFlags
ParamCount=3
Header=cryptography.h.api;
[CertAddCRLContextToStore]
1=HCERTSTORE hCertStore
2=PCCRL_CONTEXT pCrlContext
3=DWORD dwAddDisposition
4=PCCRL_CONTEXT* ppStoreContext
ParamCount=4
Header=cryptography.h.api;
[CertAddCRLLinkToStore]
1=HCERTSTORE hCertStore
2=PCCRL_CONTEXT pCrlContext
3=DWORD dwAddDisposition
4=PCCRL_CONTEXT* ppStoreContext
ParamCount=4
Header=cryptography.h.api;
[CertAddEncodedCRLToStore]
1=HCERTSTORE hCertStore
2=[CertEncodingType] dwCertEncodingType
3=const BYTE* pbCrlEncoded
4=DWORD cbCrlEncoded
5=DWORD dwAddDisposition
6=PCCRL_CONTEXT* ppCrlContext
ParamCount=6
Header=cryptography.h.api;
[CertCreateCRLContext]
1=[CertEncodingType] dwCertEncodingType
2=const BYTE* pbCrlEncoded
3=DWORD cbCrlEncoded
ParamCount=3
Header=cryptography.h.api;
[CertDeleteCRLFromStore]
1=PCCRL_CONTEXT pCrlContext
ParamCount=1
Header=cryptography.h.api;
[CertDuplicateCRLContext]
1=PCCRL_CONTEXT pCrlContext
ParamCount=1
Header=cryptography.h.api;
[CertEnumCRLsInStore]
1=HCERTSTORE hCertStore
2=PCCRL_CONTEXT pPrevCrlContext
ParamCount=2
Header=cryptography.h.api;
[CertFindCertificateInCRL]
1=PCCERT_CONTEXT pCert
2=PCCRL_CONTEXT pCrlContext
3=DWORD dwFlags
4=void* pvReserved
5=PCRL_ENTRY* ppCrlEntry
ParamCount=5
Header=cryptography.h.api;
[CertFindCRLInStore]
1=HCERTSTORE hCertStore
2=[CertEncodingType] dwEncodingType
3=[CrlFindIssuedByFlags] dwFindFlags
4=[CrlFindType] dwFindType
5=const void* pvFindPara
6=PCCRL_CONTEXT pPrevCrlContext
ParamCount=6
Header=cryptography.h.api;
[CertFreeCRLContext]
1=PCCRL_CONTEXT pCrlContext
ParamCount=1
Header=cryptography.h.api;
[CertGetCRLFromStore]
1=HCERTSTORE hCertStore
2=PCCERT_CONTEXT pIssuerContext
3=PCCRL_CONTEXT pPrevCrlContext
4=DWORD* pdwFlags
ParamCount=4
Header=cryptography.h.api;
[CertSerializeCRLStoreElement]
1=PCCRL_CONTEXT pCrlContext
2=DWORD dwFlags
3=BYTE* pbElement
4=DWORD* pcbElement
ParamCount=4
Header=cryptography.h.api;
[CertAddCTLContextToStore]
1=HCERTSTORE hCertStore
2=PCCTL_CONTEXT pCtlContext
3=DWORD dwAddDisposition
4=PCCTL_CONTEXT* ppStoreContext
ParamCount=4
Header=cryptography.h.api;
[CertAddCTLLinkToStore]
1=HCERTSTORE hCertStore
2=PCCTL_CONTEXT pCtlContext
3=DWORD dwAddDisposition
4=PCCTL_CONTEXT* ppStoreContext
ParamCount=4
Header=cryptography.h.api;
[CertAddEncodedCTLToStore]
1=HCERTSTORE hCertStore
2=DWORD dwMsgAndCertEncodingType
3=const BYTE* pbCtlEncoded
4=DWORD cbCtlEncoded
5=DWORD dwAddDisposition
6=PCCTL_CONTEXT* ppCtlContext
ParamCount=6
Header=cryptography.h.api;
[CertCreateCTLContext]
1=DWORD dwMsgAndCertEncodingType
2=const BYTE* pbCtlEncoded
3=DWORD cbCtlEncoded
ParamCount=3
[CertDeleteCTLFromStore]
1=PCCTL_CONTEXT pCtlContext
ParamCount=1
Header=cryptography.h.api;
[CertDuplicateCTLContext]
1=PCCTL_CONTEXT pCtlContext
ParamCount=1
Header=cryptography.h.api;
[CertEnumCTLsInStore]
1=HCERTSTORE hCertStore
2=PCCTL_CONTEXT pPrevCtlContext
ParamCount=2
Header=cryptography.h.api;
[CertFindCTLInStore]
1=HCERTSTORE hCertStore
2=DWORD dwMsgAndCertEncodingType
3=DWORD dwFindFlags
4=DWORD dwFindType
5=const void* pvFindPara
6=PCCTL_CONTEXT pPrevCtlContext
ParamCount=6
Header=cryptography.h.api;
[CertFreeCTLContext]
1=PCCTL_CONTEXT pCtlContext
ParamCount=1
Header=cryptography.h.api;
[CertSerializeCTLStoreElement]
1=PCCTL_CONTEXT pCtlContext
2=DWORD dwFlags
3=BYTE* pbElement
4=DWORD* pcbElement
ParamCount=4
Header=cryptography.h.api;
[CertEnumCertificateContextProperties]
1=PCCERT_CONTEXT pCertContext
2=DWORD dwPropId
ParamCount=2
Header=cryptography.h.api;
[CertEnumCRLContextProperties]
1=PCCRL_CONTEXT pCrlContext
2=DWORD dwPropId
ParamCount=2
Header=cryptography.h.api;
[CertEnumCTLContextProperties]
1=PCCTL_CONTEXT pCtlContext
2=DWORD dwPropId
ParamCount=2
Header=cryptography.h.api;
[CertGetCertificateContextProperty]
1=PCCERT_CONTEXT pCertContext
2=[CertPropId] dwPropId
3=void* pvData
4=DWORD* pcbData
ParamCount=4
Header=cryptography.h.api;
[CertGetCRLContextProperty]
1=PCCRL_CONTEXT pCrlContext
2=[CertPropId] dwPropId
3=void* pvData
4=DWORD* pcbData
ParamCount=4
Header=cryptography.h.api;
[CertGetCTLContextProperty]
1=PCCTL_CONTEXT pCtlContext
2=[CertPropId] dwPropId
3=void* pvData
4=DWORD* pcbData
ParamCount=4
Header=cryptography.h.api;
[CertSetCertificateContextProperty]
1=PCCERT_CONTEXT pCertContext
2=[CertPropId] dwPropId
3=[CertSetPropertyFlags] dwFlags
4=const void* pvData
ParamCount=4
Header=cryptography.h.api;
[CertSetCRLContextProperty]
1=PCCRL_CONTEXT pCrlContext
2=[CertPropId] dwPropId
3=[CertSetPropertyFlags] dwFlags
4=const void* pvData
ParamCount=4
Header=cryptography.h.api;
[CertSetCTLContextProperty]
1=PCCTL_CONTEXT pCtlContext
2=[CertPropId] dwPropId
3=DWORD dwFlags
4=const void* pvData
ParamCount=4
Header=cryptography.h.api;
[CertVerifyCTLUsage]
1=[CertEncodingType] dwEncodingType
2=DWORD dwSubjectType
3=void* pvSubject
4=PCTL_USAGE pSubjectUsage
5=DWORD dwFlags
6=PCTL_VERIFY_USAGE_PARA pVerifyUsagePara
7=PCTL_VERIFY_USAGE_STATUS pVerifyUsageStatus
ParamCount=7
Header=cryptography.h.api;
[CryptMsgEncodeAndSignCTL]
1=[CertEncodingType] dwMsgEncodingType
2=PCTL_INFO pCtlInfo
3=PCMSG_SIGNED_ENCODE_INFO pSignInfo
4=DWORD dwFlags
5=BYTE* pbEncoded
6=DWORD* pcbEncoded
ParamCount=6
Header=cryptography.h.api;
[CryptMsgGetAndVerifySigner]
1=HCRYPTMSG hCryptMsg
2=DWORD cSignerStore
3=HCERTSTORE* rghSignerStore
4=DWORD dwFlags
5=PCCERT_CONTEXT* ppSigner
6=DWORD* pdwSignerIndex
ParamCount=6
Header=cryptography.h.api;
[CryptMsgSignCTL]
1=[CertEncodingType] dwMsgEncodingType
2=BYTE* pbCtlContent
3=DWORD cbCtlContent
4=PCMSG_SIGNED_ENCODE_INFO pSignInfo
5=DWORD dwFlags
6=BYTE* pbEncoded
7=DWORD* pcbEncoded
ParamCount=7
Header=cryptography.h.api;
[CertCreateCertificateChainEngine]
1=PCERT_CHAIN_ENGINE_CONFIG pConfig
2=HCERTCHAINENGINE* phChainEngine
ParamCount=2
Header=cryptography.h.api;
[CertCreateCTLEntryFromCertificateContextProperties]
1=PCCERT_CONTEXT pCertContext
2=DWORD cOptAttr
3=PCRYPT_ATTRIBUTE rgOptAttr
4=DWORD dwFlags
5=void* pvReserved
6=PCTL_ENTRY pCtlEntry
7=DWORD* pcbCtlEntry
ParamCount=7
Header=cryptography.h.api;
[CertDuplicateCertificateChain]
1=PCCERT_CHAIN_CONTEXT pChainContext
ParamCount=1
Header=cryptography.h.api;
[CertFindChainInStore]
1=HCERTSTORE hCertStore
2=[CertEncodingType] dwCertEncodingType
3=DWORD dwFindFlags
4=DWORD dwFindType
5=const void* pvFindPara
6=PCCERT_CHAIN_CONTEXT pPrevChainContext
ParamCount=6
Header=cryptography.h.api;
[CertFreeCertificateChain]
1=PCCERT_CHAIN_CONTEXT pChainContext
ParamCount=1
Header=cryptography.h.api;
[CertFreeCertificateChainEngine]
1=HCERTCHAINENGINE hChainEngine
ParamCount=1
Header=cryptography.h.api;
[CertFreeCertificateChainList]
1=PCCERT_CHAIN_CONTEXT* prgpSelection
ParamCount=1
Header=cryptography.h.api;
[CertGetCertificateChain]
1=HCERTCHAINENGINE hChainEngine
2=PCCERT_CONTEXT pCertContext
3=LPFILETIME pTime
4=HCERTSTORE hAdditionalStore
5=PCERT_CHAIN_PARA pChainPara
6=[CertChainFlags] dwFlags
7=LPVOID pvReserved
8=PCCERT_CHAIN_CONTEXT* ppChainContext
ParamCount=8
Header=cryptography.h.api;windows.h.api;
[CertIsValidCRLForCertificate]
1=PCCERT_CONTEXT pCert
2=PCCRL_CONTEXT pCRL
3=DWORD dwFlags
4=void* pvReserved
ParamCount=4
Header=cryptography.h.api;
[CertSetCertificateContextPropertiesFromCTLEntry]
1=PCCERT_CONTEXT pCertContext
2=PCTL_ENTRY pCtlEntry
3=DWORD dwFlags
ParamCount=3
Header=cryptography.h.api;
[CertVerifyCertificateChainPolicy]
1=LPCSTR pszPolicyOID
2=PCCERT_CHAIN_CONTEXT pChainContext
3=PCERT_CHAIN_POLICY_PARA pPolicyPara
4=PCERT_CHAIN_POLICY_STATUS pPolicyStatus
ParamCount=4
Header=cryptography.h.api;
[CryptMsgCalculateEncodedLength]
1=[CertEncodingType] dwMsgEncodingType
2=DWORD dwFlags
3=[CryptMsgType] dwMsgType
4=const void* pvMsgEncodeInfo
5=LPSTR pszInnerContentObjID
6=DWORD cbData
ParamCount=6
Header=cryptography.h.api;
[CryptMsgClose]
1=HCRYPTMSG hCryptMsg
ParamCount=1
Header=cryptography.h.api;
[CryptMsgControl]
1=HCRYPTMSG hCryptMsg
2=[CryptMsgControlFlags] dwFlags
3=[CryptMsgControlType] dwCtrlType
4=const void* pvCtrlPara
ParamCount=4
Header=cryptography.h.api;
[CryptMsgUpdate]
1=HCRYPTMSG hCryptMsg
2=const BYTE* pbData
3=DWORD cbData
4=BOOL fFinal
ParamCount=4
Header=cryptography.h.api;
[CryptMsgCountersign]
1=HCRYPTMSG hCryptMsg
2=DWORD dwIndex
3=DWORD cCountersigners
4=PCMSG_SIGNER_ENCODE_INFO rgCountersigners
ParamCount=4
Header=cryptography.h.api;
[CryptMsgCountersignEncoded]
1=[CertEncodingType] dwEncodingType
2=PBYTE pbSignerInfo
3=DWORD cbSignerInfo
4=DWORD cCountersigners
5=PCMSG_SIGNER_ENCODE_INFO rgCountersigners
6=PBYTE pbCountersignature
7=PDWORD pcbCountersignature
ParamCount=7
Header=cryptography.h.api;
[CryptMsgDuplicate]
1=HCRYPTMSG hCryptMsg
ParamCount=1
Header=cryptography.h.api;
[CryptMsgGetParam]
1=HCRYPTMSG hCryptMsg
2=[CryptMsgParamType] dwParamType
3=DWORD dwIndex
4=void* pvData
5=DWORD* pcbData
ParamCount=5
Header=cryptography.h.api;
[CryptMsgOpenToDecode]
1=[CertEncodingType] dwMsgEncodingType
2=[CryptMsgOpenFlags] dwFlags
3=[CryptMsgType] dwMsgType
4=HCRYPTPROV_LEGACY hCryptProv
5=PCERT_INFO pRecipientInfo
6=PCMSG_STREAM_INFO pStreamInfo
ParamCount=6
Header=cryptography.h.api;
[CryptMsgOpenToEncode]
1=[CertEncodingType] dwMsgEncodingType
2=DWORD dwFlags
3=[CryptMsgType] dwMsgType
4=const void* pvMsgEncodeInfo
5=LPSTR pszInnerContentObjID
6=PCMSG_STREAM_INFO pStreamInfo
ParamCount=6
Header=cryptography.h.api;
[CryptMsgVerifyCountersignatureEncoded]
1=HCRYPTPROV_LEGACY hCryptProv
2=[CertEncodingType] dwEncodingType
3=PBYTE pbSignerInfo
4=DWORD cbSignerInfo
5=PBYTE pbSignerInfoCountersignature
6=DWORD cbSignerInfoCountersignature
7=PCERT_INFO pciCountersigner
ParamCount=7
Header=cryptography.h.api;
[CryptMsgVerifyCountersignatureEncodedEx]
1=HCRYPTPROV_LEGACY hCryptProv
2=[CertEncodingType] dwEncodingType
3=PBYTE pbSignerInfo
4=DWORD cbSignerInfo
5=PBYTE pbSignerInfoCountersignature
6=DWORD cbSignerInfoCountersignature
7=[CryptMsgSignerType] dwSignerType
8=void* pvSigner
9=DWORD dwFlags
10=void* pvReserved
ParamCount=10
Header=cryptography.h.api;
[CryptDecodeMessage]
1=DWORD dwMsgTypeFlags
2=PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara
3=PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara
4=DWORD dwSignerIndex
5=const BYTE* pbEncodedBlob
6=DWORD cbEncodedBlob
7=DWORD dwPrevInnerContentType
8=CryptMsgType* pdwMsgType
9=DWORD* pdwInnerContentType
10=BYTE* pbDecoded
11=DWORD* pcbDecoded
12=PCCERT_CONTEXT* ppXchgCert
13=PCCERT_CONTEXT* ppSignerCert
ParamCount=13
Header=cryptography.h.api;
[CryptDecryptAndVerifyMessageSignature]
1=PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara
2=PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara
3=DWORD dwSignerIndex
4=const BYTE* pbEncryptedBlob
5=DWORD cbEncryptedBlob
6=BYTE* pbDecrypted
7=DWORD* pcbDecrypted
8=PCCERT_CONTEXT* ppXchgCert
9=PCCERT_CONTEXT* ppSignerCert
ParamCount=9
Header=cryptography.h.api;
[CryptDecryptMessage]
1=PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara
2=const BYTE* pbEncryptedBlob
3=DWORD cbEncryptedBlob
4=BYTE* pbDecrypted
5=DWORD* pcbDecrypted
6=PCCERT_CONTEXT* ppXchgCert
ParamCount=6
Header=cryptography.h.api;
[CryptEncryptMessage]
1=PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara
2=DWORD cRecipientCert
3=PCCERT_CONTEXT [] rgpRecipientCert
4=const BYTE* pbToBeEncrypted
5=DWORD cbToBeEncrypted
6=BYTE* pbEncryptedBlob
7=DWORD* pcbEncryptedBlob
ParamCount=-7
Header=cryptography.h.api;
[CryptGetMessageCertificates]
1=DWORD dwMsgAndCertEncodingType
2=HCRYPTPROV_LEGACY hCryptProv
3=DWORD dwFlags
4=const BYTE* pbSignedBlob
5=DWORD cbSignedBlob
ParamCount=5
Header=cryptography.h.api;
[CryptGetMessageSignerCount]
1=[CertEncodingType] dwMsgEncodingType
2=const BYTE* pbSignedBlob
3=DWORD cbSignedBlob
ParamCount=3
Header=cryptography.h.api;
[CryptHashMessage]
1=PCRYPT_HASH_MESSAGE_PARA pHashPara
2=BOOL fDetachedHash
3=DWORD cToBeHashed
4=const BYTE* [] rgpbToBeHashed
5=DWORD [] rgcbToBeHashed
6=BYTE* pbHashedBlob
7=DWORD* pcbHashedBlob
8=BYTE* pbComputedHash
9=DWORD* pcbComputedHash
ParamCount=-9
Header=cryptography.h.api;
[CryptSignAndEncryptMessage]
1=PCRYPT_SIGN_MESSAGE_PARA pSignPara
2=PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara
3=DWORD cRecipientCert
4=PCCERT_CONTEXT [] rgpRecipientCert
5=const BYTE* pbToBeSignedAndEncrypted
6=DWORD cbToBeSignedAndEncrypted
7=BYTE* pbSignedAndEncryptedBlob
8=DWORD* pcbSignedAndEncryptedBlob
ParamCount=-8
Header=cryptography.h.api;
[CryptSignMessageWithKey]
1=PCRYPT_KEY_SIGN_MESSAGE_PARA pSignPara
2=const BYTE* pbToBeSigned
3=DWORD cToBeSigned
4=BYTE* pbSignedBlob
5=DWORD* pcbSignedBlob
ParamCount=5
Header=cryptography.h.api;
[CryptSignMessage]
1=PCRYPT_SIGN_MESSAGE_PARA pSignPara
2=BOOL fDetachedSignature
3=DWORD cToBeSigned
4=const BYTE* [] rgpbToBeSigned
5=DWORD [] rgcbToBeSigned
6=BYTE* pbSignedBlob
7=DWORD* pcbSignedBlob
ParamCount=-7
Header=cryptography.h.api;
[CryptVerifyDetachedMessageHash]
1=PCRYPT_HASH_MESSAGE_PARA pHashPara
2=BYTE* pbDetachedHashBlob
3=DWORD cbDetachedHashBlob
4=DWORD cToBeHashed
5=const BYTE* [] rgpbToBeHashed
6=DWORD rgcbToBeHashed
7=BYTE* pbComputedHash
8=DWORD* pcbComputedHash
ParamCount=-8
Header=cryptography.h.api;
[CryptVerifyDetachedMessageSignature]
1=PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara
2=DWORD dwSignerIndex
3=const BYTE* pbDetachedSignBlob
4=DWORD cbDetachedSignBlob
5=DWORD cToBeSigned
6=const BYTE* [] rgpbToBeSigned
7=DWORD [] rgcbToBeSigned
8=PCCERT_CONTEXT* ppSignerCert
ParamCount=-8
Header=cryptography.h.api;
[CryptVerifyMessageHash]
1=PCRYPT_HASH_MESSAGE_PARA pHashPara
2=BYTE* pbHashedBlob
3=DWORD cbHashedBlob
4=BYTE* pbToBeHashed
5=DWORD* pcbToBeHashed
6=BYTE* pbComputedHash
7=DWORD* pcbComputedHash
ParamCount=7
Header=cryptography.h.api;
[CryptVerifyMessageSignature]
1=PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara
2=DWORD dwSignerIndex
3=const BYTE* pbSignedBlob
4=DWORD cbSignedBlob
5=BYTE* pbDecoded
6=DWORD* pcbDecoded
7=PCCERT_CONTEXT* ppSignerCert
ParamCount=7
Header=cryptography.h.api;
[CryptVerifyMessageSignatureWithKey]
1=PCRYPT_KEY_VERIFY_MESSAGE_PARA pVerifyPara
2=PCERT_PUBLIC_KEY_INFO pPublicKeyInfo
3=const BYTE* pbSignedBlob
4=DWORD cbSignedBlob
5=BYTE* pbDecoded
6=DWORD* pcbDecoded
ParamCount=6
Header=cryptography.h.api;
[CertCompareCertificate]
1=[CertEncodingType] dwCertEncodingType
2=PCERT_INFO pCertId1
3=PCERT_INFO pCertId2
ParamCount=3
Header=cryptography.h.api;
[CertCompareCertificateName]
1=[CertEncodingType] dwCertEncodingType
2=PCERT_NAME_BLOB pCertName1
3=PCERT_NAME_BLOB pCertName2
ParamCount=3
Header=cryptography.h.api;
[CertCompareIntegerBlob]
1=PCRYPT_INTEGER_BLOB pInt1
2=PCRYPT_INTEGER_BLOB pInt2
ParamCount=2
Header=cryptography.h.api;
[CertComparePublicKeyInfo]
1=[CertEncodingType] dwCertEncodingType
2=PCERT_PUBLIC_KEY_INFO pPublicKey1
3=PCERT_PUBLIC_KEY_INFO pPublicKey2
ParamCount=3
Header=cryptography.h.api;
[CertFindAttribute]
1=LPCSTR pszObjId
2=DWORD cAttr
3=CRYPT_ATTRIBUTE[] rgAttr
ParamCount=-3
Header=cryptography.h.api;
[CertFindExtension]
1=LPCSTR pszObjId
2=DWORD cExtensions
3=CERT_EXTENSION[] rgExtensions
ParamCount=-3
Header=cryptography.h.api;
[CertFindRDNAttr]
1=LPCSTR pszObjId
2=PCERT_NAME_INFO pName
ParamCount=2
Header=cryptography.h.api;
[CertGetIntendedKeyUsage]
1=[CertEncodingType] dwCertEncodingType
2=PCERT_INFO pCertInfo
3=BYTE* pbKeyUsage
4=DWORD cbKeyUsage
ParamCount=4
Header=cryptography.h.api;
[CertGetPublicKeyLength]
1=[CertEncodingType] dwCertEncodingType
2=PCERT_PUBLIC_KEY_INFO pPublicKey
ParamCount=2
Header=cryptography.h.api;
[CertIsRDNAttrsInCertificateName]
1=[CertEncodingType] dwCertEncodingType
2=DWORD dwFlags
3=PCERT_NAME_BLOB pCertName
4=PCERT_RDN pRDN
ParamCount=4
Header=cryptography.h.api;
[CertVerifyCRLRevocation]
1=[CertEncodingType] dwCertEncodingType
2=PCERT_INFO pCertId
3=DWORD cCrlInfo
4=PCRL_INFO [] rgpCrlInfo
ParamCount=-4
Header=cryptography.h.api;
[CertVerifyCRLTimeValidity]
1=LPFILETIME pTimeToVerify
2=PCRL_INFO pCrlInfo
ParamCount=2
Header=cryptography.h.api;windows.h.api;
[CertVerifyRevocation]
1=[CertEncodingType] dwEncodingType
2=DWORD dwRevType
3=DWORD cContext
4=PVOID [] rgpvContext
5=DWORD dwFlags
6=PCERT_REVOCATION_PARA pRevPara
7=PCERT_REVOCATION_STATUS pRevStatus
ParamCount=-7
Header=cryptography.h.api;
[CertVerifyTimeValidity]
1=LPFILETIME pTimeToVerify
2=PCERT_INFO pCertInfo
ParamCount=2
Header=cryptography.h.api;windows.h.api;
[CertVerifyValidityNesting]
1=PCERT_INFO pSubjectInfo
2=PCERT_INFO pIssuerInfo
ParamCount=2
Header=cryptography.h.api;
[CryptExportPKCS8]
1=HCRYPTPROV hCryptProv
2=[CryptKeySpec] dwKeySpec
3=LPSTR pszPrivateKeyObjId
4=DWORD dwFlags
5=void* pvAuxInfo
6=BYTE* pbPrivateKeyBlob
7=DWORD* pcbPrivateKeyBlob
ParamCount=7
Header=cryptography.h.api;
[CryptExportPKCS8Ex]
1=CRYPT_PKCS8_EXPORT_PARAMS* psExportParams
2=DWORD dwFlags
3=void* pvAuxInfo
4=BYTE* pbPrivateKeyBlob
5=DWORD* pcbPrivateKeyBlob
ParamCount=5
Header=cryptography.h.api;
[CryptExportPublicKeyInfo]
1=HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey
2=[CryptKeySpec] dwKeySpec
3=[CertEncodingType] dwCertEncodingType
4=PCERT_PUBLIC_KEY_INFO pInfo
5=DWORD* pcbInfo
ParamCount=5
Header=cryptography.h.api;
[CryptExportPublicKeyInfoEx]
1=HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey
2=[CryptKeySpec] dwKeySpec
3=[CertEncodingType] dwCertEncodingType
4=LPSTR pszPublicKeyObjId
5=DWORD dwFlags
6=void* pvAuxInfo
7=PCERT_PUBLIC_KEY_INFO pInfo
8=DWORD* pcbInfo
ParamCount=8
Header=cryptography.h.api;
[CryptExportPublicKeyInfoFromBCryptKeyHandle]
1=BCRYPT_KEY_HANDLE hBCryptKey
2=[CertEncodingType] dwCertEncodingType
3=LPSTR pszPublicKeyObjId
4=DWORD dwFlags
5=void* pvAuxInfo
6=PCERT_PUBLIC_KEY_INFO pInfo
7=DWORD pcbInfo
ParamCount=7
Header=cryptography.h.api;
[CryptFindCertificateKeyProvInfo]
1=PCCERT_CONTEXT pCert
2=DWORD dwFlags
3=void* pvReserved
ParamCount=3
Header=cryptography.h.api;
[CryptFindLocalizedName]
1=LPCWSTR pwszCryptName
ParamCount=1
[CryptHashCertificate]
1=HCRYPTPROV_LEGACY hCryptProv
2=[ALG_ID] Algid
3=DWORD dwFlags
4=const BYTE* pbEncoded
5=DWORD cbEncoded
6=BYTE* pbComputedHash
7=DWORD* pcbComputedHash
ParamCount=7
Header=cryptography.h.api;
[CryptHashCertificate2]
1=LPCWSTR pwszCNGHashAlgid
2=DWORD dwFlags
3=void* pvReserved
4=BYTE* pbEncoded
5=DWORD cbEncoded
6=BYTE* pbComputedHash
7=DWORD* pcbComputedHash
ParamCount=7
[CryptHashPublicKeyInfo]
1=HCRYPTPROV_LEGACY hCryptProv
2=[ALG_ID] Algid
3=DWORD dwFlags
4=[CertEncodingType] dwCertEncodingType
5=PCERT_PUBLIC_KEY_INFO pInfo
6=BYTE* pbComputedHash
7=DWORD* pcbComputedHash
ParamCount=7
Header=cryptography.h.api;
[CryptHashToBeSigned]
1=HCRYPTPROV_LEGACY hCryptProv
2=[CertEncodingType] dwCertEncodingType
3=const BYTE* pbEncoded
4=DWORD cbEncoded
5=BYTE* pbComputedHash
6=DWORD* pcbComputedHash
ParamCount=6
Header=cryptography.h.api;
[CryptImportPKCS8]
1=CRYPT_PKCS8_IMPORT_PARAMS sPrivateKeyAndParams
2=DWORD dwFlags
3=HCRYPTPROV* phCryptProv
4=void* pvAuxInfo
ParamCount=-4
Header=cryptography.h.api;
[CryptImportPublicKeyInfo]
1=HCRYPTPROV hCryptProv
2=[CertEncodingType] dwCertEncodingType
3=PCERT_PUBLIC_KEY_INFO pInfo
4=HCRYPTKEY* phKey
ParamCount=4
Header=cryptography.h.api;
[CryptImportPublicKeyInfoEx]
1=HCRYPTPROV hCryptProv
2=[CertEncodingType] dwCertEncodingType
3=PCERT_PUBLIC_KEY_INFO pInfo
4=[ALG_ID] aiKeyAlg
5=DWORD dwFlags
6=void* pvAuxInfo
7=HCRYPTKEY* phKey
ParamCount=7
Header=cryptography.h.api;
[CryptImportPublicKeyInfoEx2]
1=[CertEncodingType] dwCertEncodingType
2=PCERT_PUBLIC_KEY_INFO pInfo
3=DWORD dwFlags
4=void* pvAuxInfo
5=BCRYPT_KEY_HANDLE* phKey
ParamCount=5
Header=cryptography.h.api;
[CryptMemAlloc]
1=ULONG cbSize
ParamCount=1
[CryptMemFree]
1=LPVOID pv
ParamCount=1
[CryptMemRealloc]
1=LPVOID pv
2=ULONG cbSize
ParamCount=2
[CryptQueryObject]
1=[CryptObjectType] dwObjectType
2=const void* pvObject
3=[CryptExpectedContentType] dwExpectedContentTypeFlags
4=[CryptExpectedFormatType] dwExpectedFormatTypeFlags
5=DWORD dwFlags
6=CertEncodingType* pdwMsgAndCertEncodingType
7=CryptContentType* pdwContentType
8=CryptFormatType* pdwFormatType
9=HCERTSTORE* phCertStore
10=HCRYPTMSG* phMsg
11=const void** ppvContext
ParamCount=11
Header=cryptography.h.api;
[CryptSignAndEncodeCertificate]
1=HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey
2=[CryptKeySpec] dwKeySpec
3=[CertEncodingType] dwCertEncodingType
4=LPCSTR lpszStructType
5=const void* pvStructInfo
6=PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm
7=const void* pvHashAuxInfo
8=PBYTE pbEncoded
9=DWORD* pcbEncoded
ParamCount=9
Header=cryptography.h.api;
[CryptSignCertificate]
1=HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey
2=[CryptKeySpec] dwKeySpec
3=[CertEncodingType] dwCertEncodingType
4=const BYTE* pbEncodedToBeSigned
5=DWORD cbEncodedToBeSigned
6=PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm
7=const void* pvHashAuxInfo
8=BYTE* pbSignature
9=DWORD* pcbSignature
ParamCount=9
Header=cryptography.h.api;
[CryptSIPAddProvider]
1=SIP_ADD_NEWPROVIDER* psNewProv
ParamCount=1
Header=cryptography.h.api;
[CryptSIPCreateIndirectData]
1=SIP_SUBJECTINFO* pSubjectInfo
2=DWORD* pcbIndirectData
3=SIP_INDIRECT_DATA* pIndirectData
ParamCount=3
Header=cryptography.h.api;
[CryptSIPGetSignedDataMsg]
1=SIP_SUBJECTINFO* pSubjectInfo
2=CertEncodingType* pdwEncodingType
3=DWORD dwIndex
4=DWORD* pcbSignedDataMsg
5=BYTE* pbSignedDataMsg
ParamCount=5
Header=cryptography.h.api;
[CryptSIPLoad]
1=GUID* pgSubject
2=DWORD dwFlags
3=SIP_DISPATCH_INFO* pSipDispatch
ParamCount=3
Header=cryptography.h.api;windows.h.api;
[CryptSIPPutSignedDataMsg]
1=SIP_SUBJECTINFO* pSubjectInfo
2=CertEncodingType* pdwEncodingType
3=DWORD dwIndex
4=DWORD* pcbSignedDataMsg
5=BYTE* pbSignedDataMsg
ParamCount=5
Header=cryptography.h.api;
[CryptSIPRemoveProvider]
1=GUID* pgProv
ParamCount=1
Header=windows.h.api;
[CryptSIPRemoveSignedDataMsg]
1=SIP_SUBJECTINFO* pSubjectInfo
2=DWORD dwIndex
ParamCount=2
Header=cryptography.h.api;
[CryptSIPRetrieveSubjectGuid]
1=LPCWSTR FileName
2=HANDLE hFileIn
3=GUID* pgSubject
ParamCount=3
Header=windows.h.api;
[CryptSIPRetrieveSubjectGuidForCatalogFile]
1=LPCWSTR FileName
2=HANDLE hFileIn
3=GUID* pgSubject
ParamCount=3
Header=windows.h.api;
[CryptSIPVerifyIndirectData]
1=SIP_SUBJECTINFO* pSubjectInfo
2=SIP_INDIRECT_DATA* pIndirectData
ParamCount=2
Header=cryptography.h.api;
[CryptUpdateProtectedState]
1=PSID pOldSid
2=LPCWSTR pwszOldPassword
3=DWORD dwFlags
4=DWORD* pdwSuccessCount
5=DWORD* pdwFailureCount
ParamCount=5
Header=windows.h.api;
[CryptVerifyCertificateSignature]
1=HCRYPTPROV_LEGACY hCryptProv
2=[CertEncodingType] dwCertEncodingType
3=BYTE* pbEncoded
4=DWORD cbEncoded
5=PCERT_PUBLIC_KEY_INFO pPublicKey
ParamCount=5
Header=cryptography.h.api;
[CryptVerifyCertificateSignatureEx]
1=HCRYPTPROV_LEGACY hCryptProv
2=[CertEncodingType] dwCertEncodingType
3=[CryptSubjectType] dwSubjectType
4=void* pvSubject
5=[CryptIssuerType] dwIssuerType
6=void* pvIssuer
7=DWORD dwFlags
8=void* pvReserved
ParamCount=8
Header=cryptography.h.api;
[CertIsStrongHashToSign]
1=PCCERT_STRONG_SIGN_PARA pStrongSignPara
2=LPCWSTR pwszCNGHashAlgid
3=PCCERT_CONTEXT pSigningCert
ParamCount=3
Header=cryptography.h.api;
[CryptSIPGetCaps]
1=SIP_SUBJECTINFO* pSubjInfo
2=SIP_CAP_SET* pCaps
ParamCount=2
Header=cryptography.h.api;
[CertAlgIdToOID]
1=DWORD dwAlgId
ParamCount=1
[CertGetNameString]
1=PCCERT_CONTEXT pCertContext
2=[CertNameType] dwType
3=[CertNameFlags] dwFlags
4=void* pvTypePara
5=LPTSTR pszNameString
6=DWORD cchNameString
ParamCount=6
Header=cryptography.h.api;
[CertNameToStr]
1=[CertEncodingType] dwCertEncodingType
2=PCERT_NAME_BLOB pName
3=[CertStrType] dwStrType
4=LPTSTR psz
5=DWORD csz
ParamCount=5
Header=cryptography.h.api;
[CertOIDToAlgId]
1=LPCSTR pszObjId
ParamCount=1
[CertRDNValueToStr]
1=DWORD dwValueType
2=PCERT_RDN_VALUE_BLOB pValue
3=LPTSTR psz
4=DWORD csz
ParamCount=4
Header=cryptography.h.api;
[CertStrToName]
1=[CertEncodingType] dwCertEncodingType
2=LPCTSTR pszX500
3=[CertStrType] dwStrType
4=void* pvReserved
5=BYTE* pbEncoded
6=DWORD* pcbEncoded
7=LPCTSTR* ppszError
ParamCount=7
Header=cryptography.h.api;
[CryptBinaryToString]
1=const BYTE* pbBinary
2=DWORD cbBinary
3=[CryptStringFlags] dwFlags
4=LPTSTR pszString
5=DWORD* pcchString
ParamCount=5
Header=cryptography.h.api;
[CryptFormatObject]
1=[CertEncodingType] dwCertEncodingType
2=DWORD dwFormatType
3=[CryptFormatStrType] dwFormatStrType
4=void* pFormatStruct
5=LPCSTR lpszStructType
6=const BYTE* pbEncoded
7=DWORD cbEncoded
8=void* pbFormat
9=DWORD* pcbFormat
ParamCount=9
Header=cryptography.h.api;
[CryptStringToBinary]
1=LPCTSTR pszString
2=DWORD cchString
3=[CryptStringFlags] dwFlags
4=BYTE* pbBinary
5=DWORD* pcbBinary
6=DWORD* pdwSkip
7=CryptStringFlags* pdwFlags
ParamCount=7
Header=cryptography.h.api;
[CertAddEnhancedKeyUsageIdentifier]
1=PCCERT_CONTEXT pCertContext
2=LPCSTR pszUsageIdentifier
ParamCount=2
Header=cryptography.h.api;
[CertGetEnhancedKeyUsage]
1=PCCERT_CONTEXT pCertContext
2=[CertFindFlags] dwFlags
3=PCERT_ENHKEY_USAGE pUsage
4=DWORD* pcbUsage
ParamCount=4
Header=cryptography.h.api;
[CertRemoveEnhancedKeyUsageIdentifier]
1=PCCERT_CONTEXT pCertContext
2=LPCSTR pszUsageIdentifier
ParamCount=2
Header=cryptography.h.api;
[CertSetEnhancedKeyUsage]
1=PCCERT_CONTEXT pCertContext
2=PCERT_ENHKEY_USAGE pUsage
ParamCount=2
Header=cryptography.h.api;
[CryptCreateKeyIdentifierFromCSP]
1=[CertEncodingType] dwCertEncodingType
2=LPCSTR pszPubKeyOID
3=PUBLICKEYSTRUC* pPubKeyStruc
4=DWORD cbPubKeyStruc
5=DWORD dwFlags
6=void* pvReserved
7=BYTE* pbHash
8=DWORD* pcbHash
ParamCount=8
Header=cryptography.h.api;
[CryptEnumKeyIdentifierProperties]
1=CRYPT_HASH_BLOB* pKeyIdentifier
2=DWORD dwPropId
3=DWORD dwFlags
4=LPCWSTR pwszComputerName
5=void* pvReserved
6=void* pvArg
7=PFN_CRYPT_ENUM_KEYID_PROP pfnEnum
ParamCount=7
Header=cryptography.h.api;
[CryptGetKeyIdentifierProperty]
1=CRYPT_HASH_BLOB* pKeyIdentifier
2=DWORD dwPropId
3=DWORD dwFlags
4=LPCWSTR pwszComputerName
5=void* pvReserved
6=void* pvData
7=DWORD* pcbData
ParamCount=7
Header=cryptography.h.api;
[CryptSetKeyIdentifierProperty]
1=CRYPT_HASH_BLOB* pKeyIdentifier
2=DWORD dwPropId
3=DWORD dwFlags
4=LPCWSTR pwszComputerName
5=void* pvReserved
6=const void* pvData
ParamCount=6
Header=cryptography.h.api;
[CryptEnumOIDFunction]
1=[CertEncodingType] dwEncodingType
2=LPCSTR pszFuncName
3=LPCSTR pszOID
4=DWORD dwFlags
5=void* pvArg
6=PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc
ParamCount=6
Header=cryptography.h.api;
[CryptEnumOIDInfo]
1=[CryptGroupId] dwGroupId
2=DWORD dwFlags
3=void* pvArg
4=PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo
ParamCount=4
Header=cryptography.h.api;
[CryptFindOIDInfo]
1=[CryptFindOidInfoKeyType] dwKeyType
2=void* pvKey
3=[CryptFindOidInfoGroudId] dwGroupId
ParamCount=3
Header=cryptography.h.api;
[CryptFreeOIDFunctionAddress]
1=HCRYPTOIDFUNCADDR hFuncAddr
2=DWORD dwFlags
ParamCount=2
Header=cryptography.h.api;
[CryptGetOIDFunctionAddress]
1=HCRYPTOIDFUNCSET hFuncSet
2=[CertEncodingType] dwEncodingType
3=LPCSTR pszOID
4=DWORD dwFlags
5=void** ppvFuncAddr
6=HCRYPTOIDFUNCADDR* phFuncAddr
ParamCount=6
Header=cryptography.h.api;
[CryptGetDefaultOIDFunctionAddress]
1=HCRYPTOIDFUNCSET hFuncSet
2=[CertEncodingType] dwEncodingType
3=LPCWSTR pwszDll
4=DWORD dwFlags
5=void** ppvFuncAddr
6=HCRYPTOIDFUNCADDR* phFuncAddr
ParamCount=6
Header=cryptography.h.api;
[CryptGetDefaultOIDDllList]
1=HCRYPTOIDFUNCSET hFuncSet
2=[CertEncodingType] dwEncodingType
3=LPWSTR pwszDllList
4=DWORD* pcchDllList
ParamCount=4
Header=cryptography.h.api;
[CryptGetOIDFunctionValue]
1=[CertEncodingType] dwEncodingType
2=LPCSTR pszFuncName
3=LPCSTR pszOID
4=LPCWSTR pwszValueName
5=DWORD* pdwValueType
6=BYTE* pbValueData
7=DWORD* pcbValueData
ParamCount=7
Header=cryptography.h.api;
[CryptInitOIDFunctionSet]
1=LPCSTR pszFuncName
2=DWORD dwFlags
ParamCount=2
[CryptInstallOIDFunctionAddress]
1=HMODULE hModule
2=[CertEncodingType] dwEncodingType
3=LPCSTR pszFuncName
4=DWORD cFuncEntry
5=CRYPT_OID_FUNC_ENTRY[] rgFuncEntry
6=[CryptInstallOIDFlags] dwFlags
ParamCount=-6
Header=cryptography.h.api;
[CryptRegisterDefaultOIDFunction]
1=[CertEncodingType] dwEncodingType
2=LPCSTR pszFuncName
3=DWORD dwIndex
4=LPCWSTR pwszDll
ParamCount=4
Header=cryptography.h.api;
[CryptRegisterOIDFunction]
1=[CertEncodingType] dwEncodingType
2=LPCSTR pszFuncName
3=LPCSTR pszOID
4=LPCWSTR pwszDll
5=LPCSTR pszOverrideFuncName
ParamCount=5
Header=cryptography.h.api;
[CryptRegisterOIDInfo]
1=PCCRYPT_OID_INFO pInfo
2=DWORD dwFlags
ParamCount=2
Header=cryptography.h.api;
[CryptSetOIDFunctionValue]
1=[CertEncodingType] dwEncodingType
2=LPCSTR pszFuncName
3=LPCSTR pszOID
4=LPCWSTR pwszValueName
5=DWORD dwValueType
6=const BYTE* pbValueData
7=DWORD cbValueData
ParamCount=7
Header=cryptography.h.api;
[CryptUnregisterDefaultOIDFunction]
1=[CertEncodingType] dwEncodingType
2=LPCSTR pszFuncName
3=LPCWSTR pwszDll
ParamCount=3
Header=cryptography.h.api;
[CryptUnregisterOIDFunction]
1=[CertEncodingType] dwEncodingType
2=LPCSTR pszFuncName
3=LPCSTR pszOID
ParamCount=3
Header=cryptography.h.api;
[CryptUnregisterOIDInfo]
1=PCCRYPT_OID_INFO pInfo
ParamCount=1
Header=cryptography.h.api;
[PFXExportCertStore]
1=HCERTSTORE hStore
2=CRYPT_DATA_BLOB* pPFX
3=LPCWSTR szPassword
4=DWORD dwFlags
ParamCount=4
Header=cryptography.h.api;
[PFXExportCertStoreEx]
1=HCERTSTORE hStore
2=CRYPT_DATA_BLOB* pPFX
3=LPCWSTR szPassword
4=void* pvReserved
5=DWORD dwFlags
ParamCount=5
Header=cryptography.h.api;
[PFXImportCertStore]
1=CRYPT_DATA_BLOB* pPFX
2=LPCWSTR szPassword
3=DWORD dwFlags
ParamCount=3
Header=cryptography.h.api;
[PFXIsPFXBlob]
1=CRYPT_DATA_BLOB* pPFX
ParamCount=1
Header=cryptography.h.api;
[PFXVerifyPassword]
1=CRYPT_DATA_BLOB* pPFX
2=LPCWSTR szPassword
3=DWORD dwFlags
ParamCount=3
Header=cryptography.h.api;